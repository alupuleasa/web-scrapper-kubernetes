version: "3.6"
services:
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - monitoring
  grafana:
    restart: unless-stopped
    links:
     - influx
     - mariadb:db
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - mariadb
    ports:
      - "3000:3000"
    environment:
      - "GF_SERVER_DOMAIN="
      - "GF_SERVER_ROOT_URL="
      - "GF_SECURITY_ADMIN_PASSWORD="
      - "GF_DATABASE_TYPE=mysql"
      - "GF_DATABASE_SSL_MODE=verify-full"
      - "GF_DATABASE_NAME=grafana"
      - "GF_DATABASE_USER=monitor"
      - "GF_DATABASE_HOST=db"
      - "GF_DATABASE_PASSWORD="
      - "GF_ANALYTICS_REPORTING_ENABLED=false"
      - "GF_PATHS_PLUGINS=/plugins"
    volumes:
      - ./grafana/prometheus_ds.yml:/etc/grafana/provisioning/datasources
    networks:
      - network1
  influx:
    image: influxdb:latest
    container_name: influxdb
    depends_on:
      - mariadb
    ports:
      - "8086:8086"
      - "127.0.0.1:8083:8083"
    environment:
      - "INFLUXDB_REPORTING_DISABLED=true"
      - "INFLUXDB_DB=influx"
      - "INFLUXDB_ADMIN_USER="
      - "INFLUXDB_ADMIN_PASSWORD="
      - "INFLUXDB_WRITE_USER="
      - "INFLUXDB_WRITE_USER_PASSWORD="
      - "INFLUXDB_DATA_QUERY_LOG_ENABLED=false"
    volumes:
      - /data/influxdb/data:/var/lib/influxdb
    networks:
      - network1
  prometheus:
    restart: unless-stopped
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - network1
  web-scrapper:
    container_name: web-scrapper
    image: golang:latest
    ports: ["8001:8001"]
    environment:
      - GO111MODULE=on
      - GOPATH=/go
      - GOBIN=/go/bin/docker
      - SSH_AUTH_SOCK=/ssh-agent
    stdin_open: true
    tty: true
    volumes:
      - .:/go/src/web-scrapper
    working_dir: /go/src/web-scrapper
    networks:
      - network1
    depends_on:
      - mariadb
  mariadb:
    image: mariadb:latest
    container_name: mariadb
    tty: true
    stdin_open: true
    hostname: mariadb
    volumes:
      - ./db/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - MARIADB_ROOT_HOST=%
      - MARIADB_DATABASE=web-scrapper
      - MARIADB_USER=web-scrapper
      - MARIADB_PASSWORD=pass4web-scrapper
      - MARIADB_ROOT_PASSWORD=pass4web-scrapper
      - MYSQL_ROOT_PASSWORD=pass4web-scrapper
      - MYSQL_DATABASE=web-scrapper
      - MYSQL_USER=web-scrapper
      - MYSQL_PASSWORD=pass4web-scrapper
      - MYSQL_ROOT_HOST=%
      - GRAFANA_DATABASE=grafana
      - GRAFANA_USER=monitor
      - GRAFANA_PASSWORD=
    ports: ["3306:3306"]
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "[ -f /var/lib/mysql/init_done/db.opt ]"
        ]
      interval: 10s
      timeout: 2s
      retries: 10
      start_period: 30s
    networks:
      - network1
networks:
  default:
    ipam:
      driver: default
      config:
        - subnet: 192.168.255.0/24
  network1:
    external: true
    name: web-scrapper-network